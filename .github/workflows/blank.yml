# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-ubuntu:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: ${{false}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      

      # Runs a single command using the runners shell
      - name: Install dependencies
        run: $GITHUB_WORKSPACE/ci/linux/install-dependencies-ubuntu.sh

      # Runs a set of commands using the runners shell
      - name: Build
        run: $GITHUB_WORKSPACE/ci/linux/build-ubuntu.sh
        
      - name : Package
        run: $GITHUB_WORKSPACE/ci/linux/package-ubuntu.sh
        
      - name : Publish artifact
        uses: actions/upload-artifact@v2.2.3
        with: 
          path: ./package
          name: Built package
      - name : Publish blender file to release
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          file: ${{github.workspace}}/transition.blend
          repo_token: ${{secrets.GITHUB_TOKEN}}
          tag: ${{github.ref}}

      - name : Publish binary file
        if: github.event_name == 'release'
        uses: fnkr/github-action-ghr@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GHR_PATH: ${{github.workspace}}/package/
        
  build-windows:
    # The type of runner that the job will run on
    runs-on: windows-latest
    env:
      BUILD_CONFIG: RelWithDebInfo
      DEPS_BASE_PATH: D:\obsdependencies
      DEPS_BASE_PATH_32: D:\obsdependencies\win32
      DEPS_BASE_PATH_64: D:\obsdependencies\win64
      QT_BASE_DIR: D:\QtDep
      QTDIR32: D:\QtDep\5.10.1\msvc2017
      QTDIR64: D:\QtDep\5.10.1\msvc2017_64
      OBS_PATH: D:\obs_studio

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true

      # Runs a single command using the runners shell
      - name: Install Qt
        run: ${{github.workspace}}/ci/windows/install-qt-win.cmd
        env:
          QtBaseDir: ${{env.QT_BASE_DIR}}
      
      - name: Restore cached dependencies
        uses: actions/cache@v2.1.6
        with: 
          path: $DEPS_BASE_PATH
          key: 'obsdeps'
          
      - name: Download obs studio dependencies
        run: ${{github.workspace}}/ci/windows/download_obs_deps.cmd
        
      - name: Restore cached OBS build
        uses: actions/cache@v2.1.6
        with:
          path: ${{env.OBS_PATH}}
          key: 'obs'
      
      - name: Prepare windows
        run: ${{github.workspace}}/ci/windows/prepare-obs-windows.cmd
        env:
          build_config: ${{env.BUILD_CONFIG}}
          DepsPath32: ${{env.DEPS_PATH_32}}
          DepsPath64: ${{env.DEPS_PATH_64}}
          QTDIR32: ${{env.QTDIR32}}
          QTDIR64: ${{env.QTDIR64}}
          OBSPath: ${{env.OBS_PATH}}
      
      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1.0.2
        
      - name: Build OBS studio 64bits
        run: msbuild /m /p:Configuration=${{env.BUILD_CONFIG}} ${{env.OBS_PATH}}\build64\obs-studio.sln
      
      - name: CMake plugin
        run: ${{github.workspace}}/ci/windows/prepare-windows.cmd
        env:
          build_config: ${{env.BUILD_CONFIG}}
          QTDIR64: ${{env.QTDIR64}}
          QTDIR32: ${{env.QTDIR32}}
          OBSPath: ${{env.OBS_PATH}}
      
      - name: Build plugin (64bit)
        run: msbuild /m /p:Configuration=${{env.BUILD_CONFIG}} ${{github.workspace}}\build64\obs-studio.sln
      
      - name: Package build
        run: ${{github.workspace}}/ci/windows/package-windows.cmd
      
      - name: Export installer
        uses: actions/upload-artifact@v2.2.3
        with: 
          path: ./package
          name: Windows installer

      - name : Publish binary file
        if: github.event_name == 'release'
        uses: fnkr/github-action-ghr@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GHR_PATH: ${{github.workspace}}/package/
