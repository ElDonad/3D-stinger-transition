uniform float4x4 ViewProj;
uniform texture2d tex_a;
uniform texture2d tex_b;
uniform float t;


sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData VSDefault(VertData v_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float srgb_nonlinear_to_linear_channel(float u)
{
	return (u <= 0.04045) ? (u / 12.92) : pow((u + 0.055) / 1.055, 2.4);
}

float3 srgb_nonlinear_to_linear(float3 v)
{
	return float3(srgb_nonlinear_to_linear_channel(v.r), srgb_nonlinear_to_linear_channel(v.g), srgb_nonlinear_to_linear_channel(v.b));
}

float4 PSSlide(VertData v_in) : TARGET
{
	float2 tex_a_uv = v_in.uv;
	float2 tex_b_uv = v_in.uv;
	float4 outa;
	float4 outb;
	float4 outc;
	outc.a = 1.0;
    outa = tex_a.Sample(textureSampler, tex_a_uv);
    outb = tex_b.Sample(textureSampler, tex_b_uv);

	outc.rgb = srgb_nonlinear_to_linear(outa.rgb * (1.0 - t) + outb.rgb * t);
	/*if(v_in.uv.x < t){
		outc.rgb = srgb_nonlinear_to_linear(outb.rgb);
	}
	else{
		outc.rgb = srgb_nonlinear_to_linear(outa.rgb);
	}*/
	//return outc;
	outa.rgb = srgb_nonlinear_to_linear(outa.rgb);
	return outa;
}

technique Transition
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader = PSSlide(v_in);
	}
}